// Copyright 2018 The Kubeflow Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

option go_package = "github.com/kubeflow/pipelines/backend/api/go_client";
package v2beta1;

import "backend/api/v2beta1/error.proto";
import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "protoc-gen-swagger/options/annotations.proto";

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
  responses: {
    key: "default";
    value: {
      schema: {
        json_schema: {
          ref: ".api.Status";
        }
      }
    }
  }
  // Use bearer token for authorizing access to job service.
  // Kubernetes client library(https://kubernetes.io/docs/reference/using-api/client-libraries/)
  // uses bearer token as default for authorization. The section below
  // ensures security definition object is generated in the swagger definition.
  // For more details see https://github.com/OAI/OpenAPI-Specification/blob/3.0.0/versions/2.0.md#securityDefinitionsObject
  security_definitions: {
    security: {
      key: "Bearer";
      value: {
        type: TYPE_API_KEY;
        in: IN_HEADER;
        name: "authorization";
      }
    }
  }
  security: {
    security_requirement: {
      key: "Bearer";
      value: {};
    }
  }
};

service RunService {
  // Creates a new run in an experiment by experiment ID.
  rpc CreateRunInExperiment(CreateRunRequestByExperimentID) returns (Run) {
    option (google.api.http) = {
      post: "/apis/v2beta1/experiments/{experiment_id}/runs"
      body: "run"
    };
  }

  // Creates a new run in an experiment by experiment name.
  rpc CreateRunInExperimentByName(CreateRunRequestByExperimentName) returns (Run) {
    option (google.api.http) = {
      post: "/apis/v2beta1/experiments/names/{experiment_name}/runs"
      body: "run"
    };
  }

  // Finds a specific run by ID.
  rpc GetRun(GetRunRequest) returns (Run) {
    option (google.api.http) = {
      get: "/apis/v2beta1/runs/{id}"
    };
  }

  // Finds all runs across all experiments.
  rpc ListRuns(ListRunsRequest) returns (ListRunsResponse) {
    option (google.api.http) = {
      get: "/apis/v2beta1/runs"
    };
  }

  // Finds all runs of a specific experiment by experiment ID.
  rpc ListRunsByExperiment(ListRunsRequestByExperimentID) returns (ListRunsResponse) {
    option (google.api.http) = {
      get: "/apis/v2beta1/experiments/{experiment_id}/runs"
    };
  }

  // Finds all runs of a specific experiment by experiment name.
  rpc ListRunsByExperimentName(ListRunsRequestByExperimentName) returns (ListRunsResponse) {
    option (google.api.http) = {
      get: "/apis/v2beta1/experiments/names/{experiment_name}/runs"
    };
  }

  // Archives a run.
  rpc ArchiveRun(ArchiveRunRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/apis/v2beta1/runs/{id}:archive"
    };
  }

  // Restores an archived run.
  rpc UnarchiveRun(UnarchiveRunRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/apis/v2beta1/runs/{id}:unarchive"
    };
  }

  // Deletes a run.
  rpc DeleteRun(DeleteRunRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/apis/v2beta1/runs/{id}"
    };
  }

  // ReportRunMetrics reports metrics of a run. Each metric is reported in its
  // own transaction, so this API accepts partial failures. Metric can be
  // uniquely identified by (run_id, node_id, name). Duplicate reporting will be
  // ignored by the API. First reporting wins.
  rpc ReportRunMetrics(ReportRunMetricsRequest)
      returns (ReportRunMetricsResponse) {
    option (google.api.http) = {
      post: "/apis/v2beta1/runs/{id}:reportMetrics"
      body: "*"
    };
  }

  // Finds a run's artifact data.
  rpc ReadArtifact(ReadArtifactRequest) returns (ReadArtifactResponse) {
    option (google.api.http) = {
      get: "/apis/v2beta1/runs/{run_id}/nodes/{node_id}/artifacts/{artifact_name}:read"
    };
  }

  // Terminates an active run.
  rpc TerminateRun(TerminateRunRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/apis/v2beta1/runs/{id}:terminate"
    };
  }

  // Re-initiates a failed or terminated run.
  rpc RetryRun(RetryRunRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/apis/v2beta1/runs/{id}:retry"
    };
  }
}

message CreateRunInExperimentIDRequest {
  // The ID of the experiment to be retrieved.
  string experiment_id = 1;

  Run run = 2;
}

message CreateRunInExperimentByNameRequest {
  // The name of the experiment to be retrieved.
  string experiment_name = 1;

  Run run = 2;
}

message GetRunRequest {
  // The ID of the run to be retrieved.
  string id = 1;
}

message ListRunsByExperimentRequest {
  // The ID of the experiment to be retrieved.
  string experiment_id = 1;

  ListRunsRequest request = 2;
}

message ListRunsByExperimentNameRequest {
  // The name of the experiment to be retrieved.
  string experiment_name = 1;

  ListRunsRequest request = 2;
}

message ListRunsRequest {
  // A page token to request the next page of results. The token is acquired
  // from the nextPageToken field of the response from the previous
  // ListRuns call or can be omitted when fetching the first page.
  string page_token = 1;

  // The number of runs to be listed per page. If there are more runs than this
  // number, the response message will contain a nextPageToken field you can use
  // to fetch the next page.
  int32 page_size = 2;

  // Can be format of "field_name", "field_name asc" or "field_name desc"
  // (Example, "name asc" or "id desc"). Ascending by default.
  string sort_by = 3;

  // Optional input field. Filters based on the namespace.
  string namespace = 4;

  // A url-encoded, JSON-serialized Filter protocol buffer (see
  // [filter.proto](https://github.com/kubeflow/pipelines/blob/master/backend/api/filter.proto)).
  string filter = 5;
}

message TerminateRunRequest {
  // The ID of the run to be terminated.
  string id = 1;
}

message RetryRunRequest {
  // The ID of the run to be retried.
  string id = 1;
}

message ListRunsResponse {
  repeated Run runs = 1;

  // The total number of runs for the given query.
  int32 total_size = 2;

  // The token to list the next page of runs.
  string next_page_token = 3;
}

message ArchiveRunRequest {
  // The ID of the run to be archived.
  string id = 1;
}

message UnarchiveRunRequest {
  // The ID of the run to be restored.
  string id = 1;
}

message DeleteRunRequest {
  // The ID of the run to be deleted.
  string id = 1;
}

message Run {
  // Output. Unique run ID. Generated by API server.
  string id = 1;

  // Required input field. Name provided by user,
  // or auto generated if it is created by a recurring run. Not unique.
  string name = 2;

  enum StorageState {
    STORAGESTATE_UNKNOWN = 0;
    STORAGESTATE_AVAILABLE = 1;
    STORAGESTATE_ARCHIVED = 2;
  }

  // Output. Specifies whether this run is in archived or available mode.
  StorageState storage_state = 3;

  // Optional input field. Describes the purpose of the run.
  string description = 4;

  // Required input field. Specifies the source of the pipeline spec for this 
  // run. Can be either a pipeline id, or a pipeline spec.
  Oneof pipeline_source {
    // The ID of the pipeline user uploaded before.
    string pipeline_id = 5;
    // The pipeline spec.
    google.protobuf.Struct pipeline_spec = 6;
  }

  // Runtime config of the pipeline. 
  RuntimeConfig runtime_config = 7;

  // Optional input field. Specifies which Kubernetes service account this run uses.
  string service_account = 8;

  // Output. The time the run was created.
  google.protobuf.Timestamp created_at = 9;

  // Output. When this run is scheduled to run. This could be different from
  // created_at. For example, if a run is from a backfilling job that was
  // supposed to run 2 month ago, the scheduled_at is 2 month ago,
  // v.s. created_at is the current time.
  google.protobuf.Timestamp scheduled_at = 10;

  // Output. The time this run is finished.
  google.protobuf.Timestamp finished_at = 11;

  // Output. The status of the run.
  enum Status {
    STATUS_UNKNOWN = 0;
    STATUS_PENDING = 1;
    STATUS_RUNNING = 2;
    STATUS_SUCCEEDED = 3;
    STATUS_SKIPPED = 4;
    STATUS_FAILED = 5;
    STATUS_ERROR = 6;
  }
  Status status = 12;

  // In case any error happens retrieving a run field, only run ID
  // and the error message is returned. Client has the flexibility of choosing
  // how to handle error. This is especially useful during listing call.
  string error = 13;
}

message RunMetric {
  // Required. The user defined name of the metric. It must between 1 and 63
  // characters long and must conform to the following regular expression:
  // `[a-z]([-a-z0-9]*[a-z0-9])?`.
  string name = 1;

  // Required. The runtime node ID which reports the metric. The node ID can be
  // found in the RunDetail.workflow.Status. Metric with same (node_id, name)
  // are considerd as duplicate. Only the first reporting will be recorded. Max
  // length is 128.
  string node_id = 2;

  oneof value {
    // The number value of the metric.
    double number_value = 3;
  }

  enum Format {
    // Default value if not present.
    FORMAT_UNSPECIFIED = 0;
    // Display value as its raw format.
    RAW = 1;
    // Display value in percentage format.
    PERCENTAGE = 2;
  }
  // The display format of metric.
  Format format = 4;
}

message ReportRunMetricsRequest {
  // Required. The parent run ID of the metric.
  string id = 1;

  // List of metrics to report.
  repeated RunMetric metrics = 2;
}

message ReportRunMetricsResponse {
  message ReportRunMetricResult {
    // Output. The name of the metric.
    string metric_name = 1;

    // Output. The ID of the node which reports the metric.
    string metric_node_id = 2;

    enum Status {
      // Default value if not present.
      UNSPECIFIED = 0;
      // Indicates successful reporting.
      OK = 1;
      // Indicates that the payload of the metric is invalid.
      INVALID_ARGUMENT = 2;
      // Indicates that the metric has been reported before.
      DUPLICATE_REPORTING = 3;
      // Indicates that something went wrong in the server.
      INTERNAL_ERROR = 4;
    }
    // Output. The status of the metric reporting.
    Status status = 3;

    // Output. The detailed message of the error of the reporting.
    string message = 4;
  }
  repeated ReportRunMetricResult results = 1;
}

message ReadArtifactRequest {
  // The ID of the run.
  string run_id = 1;
  // The ID of the running node.
  string node_id = 2;
  // The name of the artifact.
  string artifact_name = 3;
}

message ReadArtifactResponse {
  // The bytes of the artifact content.
  bytes data = 1;
}

